generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CoinStatus {
  Active
  InActive
}

enum PaymentMethod {
  PrePaid
  CashOnDelivery
  Offline
}

enum Status {
  Delivered
  Pending
}

model User {
  id           String @id @default(uuid())
  firstName    String
  lastName     String
  phone        String @unique
  email        String @unique
  hashPassword String

  wallet Coin[]  @relation("UserWallet")
  orders Order[] @relation("UserOrders")
}

model Agent {
  id           String  @id @default(uuid())
  firstName    String
  lastName     String
  phone        String  @unique
  email        String  @unique
  wallet       Coin[]  @relation("AgentWallet")
  hashPassword String
  orders       Order[] @relation("AgentOrders")
}

model Coin {
  coinId       String     @id @default(uuid())
  ownerId      String
  value        Float
  createdOn    DateTime
  transferDate DateTime
  status       CoinStatus
  user         User?      @relation("UserWallet", fields: [ownerId], references: [id], map: "Coin_ownerId_user_fkey")
  agent        Agent?     @relation("AgentWallet", fields: [ownerId], references: [id], map: "Coin_ownerId_agent_fkey")
}

model Item {
  itemId String @id @default(uuid())
  name   String
  price  Float

  Order Order[] @relation("OrderItems")
}

model Order {
  orderId         String        @id @default(uuid())
  value           Float
  deliveryDate    DateTime
  paymentMode     PaymentMethod
  deliveryStatus  Status
  userId          String
  assignedAgentId String

  user          User   @relation("UserOrders", fields: [userId], references: [id])
  assignedAgent Agent  @relation("AgentOrders", fields: [assignedAgentId], references: [id])
  items         Item[] @relation("OrderItems")
}
